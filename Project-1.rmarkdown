---
title: "Project 1"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---


## Data Processing


```{r}
library(tidyverse)
data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
data <- data |> select(area_name = Area_name, STCOU, ends_with("D")) |> pivot_longer(cols = -c(area_name, STCOU), names_to = "variable", values_to = "enrollment_value") |> mutate(year = as.numeric(substr(variable, nchar(variable) - 2, nchar(variable) - 1)), measurement_type = substr(variable, 1, 7))
#step 4
county_data <- data |>
  filter(grepl(", \\w\\w", area_name))
non_county_data <- data |>
  filter(!grepl(", \\w\\w", area_name))
class(county_data) <- c("county", class(county_data))
class(non_county_data) <- c("state", class(non_county_data))
#Step 5
county_data <- county_data |>
  mutate(state_abbr = substr(area_name, nchar(area_name) - 1, nchar(area_name)))
#Step 6
non_county_data <- non_county_data |>
  mutate(
    state_abbr = substr(area_name, nchar(area_name) - 1, nchar(area_name)),
    division = case_when(
      area_name %in% c("UNITED STATES") ~ "ERROR",
      state_abbr %in% c("CT", "ME", "MA", "NH", "RI", "VT") ~ "New England",
      state_abbr %in% c("NJ", "NY", "PA") ~ "Mid-Atlantic",
      state_abbr %in% c("IL", "IN", "MI", "OH", "WI") ~ "East North Central",
      state_abbr %in% c("IA", "KS", "MN", "MO", "NE", "ND", "SD") ~ "West North Central",
      state_abbr %in% c("DE", "FL", "GA", "MD", "NC", "SC", "VA", "WV") ~ "South Atlantic",
      state_abbr %in% c("AL", "KY", "MS", "TN") ~ "East South Central",
      state_abbr %in% c("AR", "LA", "OK", "TX") ~ "West South Central",
      state_abbr %in% c("AZ", "CO", "ID", "MT", "NV", "NM", "UT", "WY") ~ "Mountain",
      state_abbr %in% c("AK", "CA", "HI", "OR", "WA") ~ "Pacific",
      TRUE ~ "Unknown Division"
    )
  )
```

## Data Processing

```{r}
library(tidyverse)
# Function for steps 1 & 2
process_data_step_1_2 <- function(url, value_column = "enrollment_value") {
  # Read CSV from URL
  data <- read_csv(url)
  # Process data: select columns, pivot to long format
  processed_data <- data |>
    select(area_name = Area_name, STCOU, ends_with("D")) |>
    pivot_longer(cols = -c(area_name, STCOU), names_to = "variable", values_to = value_column) 
  return(processed_data)
}
# Function for step 3
process_data_step_3 <- function(processed_data) {
  processed_data <- processed_data |>
    mutate(
      year = as.numeric(substr(variable, nchar(variable) - 2, nchar(variable) - 1)),
      measurement_type = substr(variable, 1, 7)
    )
  return(processed_data)
}
# Function for step 5
process_data_step_5 <- function(county_data) {
  county_data <- county_data |>
    mutate(state_abbr = substr(area_name, nchar(area_name) - 1, nchar(area_name)))
  return(county_data)
}
# Function for step 6
process_data_step_6 <- function(non_county_data) {
  non_county_data <- non_county_data |>
    mutate(
      state_abbr = substr(area_name, nchar(area_name) - 1, nchar(area_name)),
      division = case_when(
        area_name %in% c("UNITED STATES") ~ "ERROR",
        state_abbr %in% c("CT", "ME", "MA", "NH", "RI", "VT") ~ "New England",
        state_abbr %in% c("NJ", "NY", "PA") ~ "Mid-Atlantic",
        state_abbr %in% c("IL", "IN", "MI", "OH", "WI") ~ "East North Central",
        state_abbr %in% c("IA", "KS", "MN", "MO", "NE", "ND", "SD") ~ "West North Central",
        state_abbr %in% c("DE", "FL", "GA", "MD", "NC", "SC", "VA", "WV") ~ "South Atlantic",
        state_abbr %in% c("AL", "KY", "MS", "TN") ~ "East South Central",
        state_abbr %in% c("AR", "LA", "OK", "TX") ~ "West South Central",
        state_abbr %in% c("AZ", "CO", "ID", "MT", "NV", "NM", "UT", "WY") ~ "Mountain",
        state_abbr %in% c("AK", "CA", "HI", "OR", "WA") ~ "Pacific",
        TRUE ~ "Unknown Division"
      )
    )
  return(non_county_data)
}
# Function for step 4,5,6
process_data_step_4_5_6 <- function(processed_data) {
  county_data <- processed_data |>
    filter(grepl(", \\w\\w", area_name))
  
  non_county_data <- processed_data |>
    filter(!grepl(", \\w\\w", area_name))
  
  class(county_data) <- c("county", class(county_data))
  class(non_county_data) <- c("state", class(non_county_data))
  
  county_data <- process_data_step_5(county_data)
  non_county_data <- process_data_step_6(non_county_data)
  
  return(list(county_data = county_data, non_county_data = non_county_data))
}
# Wrapper function
my_wrapper <- function(url, default_var_name = "enrollment_value") {
  result <- read_csv(url) |>
    process_data_step_1_2(value_column = default_var_name) |>
    process_data_step_3() |>
    process_data_step_4_5_6()
  
  return(result)
}
```

## Call it and Combine Your Data

```{r}
# URLs for the CSV files
url1 <- "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv"
url2 <- "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv"

# Call my_wrapper function for both URLs
result1 <- my_wrapper(url1)
result2 <- my_wrapper(url2)

# Function to combine two sets of tibbles
combine_results <- function(result1, result2) {
  combined_county_data <- bind_rows(result1$county_data, result2$county_data)
  combined_non_county_data <- bind_rows(result1$non_county_data, result2$non_county_data)
  return(list(county_data = combined_county_data, non_county_data = combined_non_county_data))
}
combined_results <- combine_results(result1, result2)
# Access the combined tibbles
combined_county_data <- combined_results$county_data
combined_non_county_data <- combined_results$non_county_data
```

## Writing a Generic Function for Summarizing

```{r}
plot.state <- function(df, var_name = "enrollment_value") {
  df <- df |>
    filter(division != "ERROR") |>
    group_by(year, division) |>
    summarize(mean_value = mean(get(var_name), na.rm = TRUE))
  
  ggplot(df, aes(x = year, y = mean_value, group = division, color = division)) +
    geom_line() +
    labs(title = "Mean Enrollment Values Across Years by Division",
         x = "Year", y = "Mean Enrollment Value") +
    theme_minimal()
}
plot.county <- function(df, state = NULL, top_bottom = "top", num_counties = 5, var_name = "enrollment_value") {
  if (!is.null(state)) {
    df <- df |>
      filter(state_abbr == state)
  }
  
  if (top_bottom == "top") {
    df <- df |>
      arrange(desc(get(var_name))) |>
      slice_head(n = num_counties)
  } else if (top_bottom == "bottom") {
    df <- df |>
      arrange(get(var_name)) |>
      slice_head(n = num_counties)
  }
  
  ggplot(df, aes(x = reorder(area_name, get(var_name)), y = get(var_name))) +
    geom_bar(stat = "identity", fill = "steelblue") +
    labs(title = paste("Top", num_counties, ifelse(top_bottom == "top", "Highest", "Lowest"),
                       "Counties in", state, "by Enrollment"),
         x = "County", y = "Enrollment Value") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
```

## Put it together

```{r}
# URLs for enrollment data
enrollment_urls <- c(
  "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv",
  "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv"
)

# Process and plot enrollment data
processed_enrollment <- lapply(enrollment_urls, my_wrapper, value_column = "enrollment_value")
combined_enrollment <- combine_results(processed_enrollment[[1]], processed_enrollment[[2]])


# Plotting for enrollment data
print(plot.state(combined_enrollment$state_data))
print(plot.county(combined_enrollment$county_data, state = "NC", top_bottom = "top", num_counties = 20, var_name = "enrollment_value"))
print(plot.county(combined_enrollment$county_data, state = "SC", top_bottom = "bottom", num_counties = 7, var_name = "enrollment_value"))
print(plot.county(combined_enrollment$county_data, state = "PA", top_bottom = "top", num_counties = 8, var_name = "enrollment_value"))

# URLs for PST data
pst_urls <- c(
  "https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv",
  "https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv",
  "https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv",
  "https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv"
)

# Process and plot PST data
processed_pst <- lapply(pst_urls, my_wrapper, value_column = "PST_value")
combined_pst <- combine_results(processed_pst)

# Plotting for PST data
print(plot.state(combined_pst$state_data))
print(plot.county(combined_pst$county_data, state = "CA", top_bottom = "top", num_counties = 15, var_name = "PST_value"))
print(plot.county(combined_pst$county_data, state = "TX", top_bottom = "top", num_counties = 4, var_name = "PST_value"))
print(plot.county())
print(plot.county(combined_pst$county_data, state = "NY", top_bottom = "top", num_counties = 10, var_name = "PST_value"))

```

